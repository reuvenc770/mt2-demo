{"version":3,"sources":["RoleController.js","RoleApiService.js"],"names":[],"mappingsxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"role.js","sourcesContent":["mt2App.controller( 'roleController' , [ '$log' , '$window' , '$location' , '$timeout' , 'RoleApiService' , function ( $log , $window , $location , $timeout , RoleApiService ) {\n    var self = this;\n    self.$location = $location;\n\n    self.headers = [ 'Actions' , 'ID', 'Slug', 'Name'];\n    self.currentRole = { \"name\" : \"\" ,\"permissions\" : []};\n    self.createUrl = 'role/create/';\n    self.editUrl = 'role/edit/';\n\n    self.formErrors = \"\";\n\n    self.loadRole = function () {\n        var pathMatches = $location.path().match( /^\\/role\\/edit\\/(\\d{1,})/ );\n\n        RoleApiService.getRole( pathMatches[ 1 ] , function ( response ) {\n            self.currentRole = response.data;\n        } )\n    }\n\n    self.loadRoles = function () {\n        RoleApiService.getRoles( self.loadRolesSuccessCallback , self.loadRolesFailureCallback );\n    };\n\n    self.resetForm = function () {\n        self.currentRole = {};\n    };\n\n    /**\n     * Click Handlers\n     */\n    self.viewAdd = function () {\n        $location.url( self.createUrl );\n        $window.location.href = self.createUrl;\n    };\n\n    self.saveNewRole = function () {\n        self.resetFieldErrors();\n\n        RoleApiService.saveNewRole( self.currentRole , self.SuccessCallBackRedirect , self.saveNewRoleFailureCallback );\n    };\n\n    self.editRole = function () {\n        self.resetFieldErrors();\n\n        RoleApiService.editRole( self.currentRole , self.SuccessCallBackRedirect , self.editRoleFailureCallback );\n    };\n\n    self.toggleSelection = function (role) {\n        var idx = self.currentRole.permissions.indexOf(role);\n\n        // is currently selected\n        if (idx > -1) {\n            self.currentRole.permissions.splice(idx, 1);\n        }\n\n        // is newly selected\n        else {\n            self.currentRole.permissions.push(role);\n        }\n    };\n\n\n    /**\n     * Callbacks\n     */\n    self.loadRolesSuccessCallback = function ( response ) {\n        self.roles = response.data;\n    };\n\n    self.loadRolesFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load Users.' );\n\n        self.launchModal();\n    }\n\n    self.SuccessCallBackRedirect = function ( response ) {\n        $location.url( '/role' );\n        $window.location.href = '/role';\n    };\n\n    self.saveNewRoleFailureCallback = function ( response ) {\n        self.loadFieldErrors( 'name' , response );\n        self.loadFieldErrors( 'permissions' , response );\n    };\n\n    self.editRoleFailureCallback = function ( response ) {\n        self.loadFieldErrors( 'name' , response );\n        self.loadFieldErrors( 'permissions' , response );\n    };\n\n    /**\n     * Errors\n     */\n    self.loadFieldErrors = function ( field , response ) {\n        if ( typeof( response.data[ field ] ) != 'undefined' ) {\n            self.setFieldError( field , response.data[ field ].join( ' ' ) );\n        }\n    };\n\n    self.setFieldError = function ( field , errorMessage ) {\n        self.formErrors[ field ] = errorMessage;\n    };\n\n    self.resetFieldErrors = function () {\n        self.formErrors = {};\n    };\n\n\n    /**\n     * Page Modal\n     */\n\n    self.setModalLabel = function ( labelText ) {\n        var modalLabel = angular.element( document.querySelector( '#pageModalLabel' ) );\n\n        modalLabel.text( labelText );\n    };\n\n    self.setModalBody = function ( bodyText ) {\n        var modalBody = angular.element( document.querySelector( '#pageModalBody' ) );\n\n        modalBody.text( bodyText );\n    };\n\n    self.launchModal = function () {\n        $( '#pageModal' ).modal('show');\n    };\n\n    self.resetModal = function () {\n        self.setModalLabel( '' );\n        self.setModalBody( '' );\n\n        $( '#pageModal' ).modal('hide');\n    };\n} ] );\n","mt2App.service( 'RoleApiService' , function ( $http , $log ) {\n    var self = this;\n\n    self.baseApiUrl = '/api/role';\n\n    self.getRole = function ( id , successCallback ) {\n        $http( { \"method\" : \"GET\" , \"url\" : this.baseApiUrl + '/' + id } )\n            .then( successCallback );\n    }\n\n    self.getRoles = function ( successCallback , failureCallback ) {\n        $http( { \"method\" : \"GET\" , \"url\" : this.baseApiUrl } )\n            .then( successCallback , failureCallback );\n    }\n\n    self.saveNewRole = function ( newRole , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"POST\" ,\n            \"url\" : this.baseApiUrl ,\n            \"data\" : newRole\n        } ).then( successCallback , failureCallback );\n    }\n\n    self.editRole = function ( role , successCallback , failureCallback  ) {\n        var request = role;\n\n        request[ '_method' ] = 'PUT';\n\n        $http( {\n            \"method\" : \"PUT\" ,\n            \"url\" : this.baseApiUrl + '/' + role.id ,\n            \"data\" : request\n        } ).then( successCallback , failureCallback );\n    }\n} );\n"],"sourceRoot":"/source/"}