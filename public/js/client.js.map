{"version":3,"sources":["ClientController.js","ClientApiService.js","ClientTableDirective.js","ClientUrlModalDirective.js"],"names":[],"mappingshnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"client.js","sourcesContent":["mt2App.controller( 'FeedController' , [ '$rootScope' , '$window' , '$location' , 'ClientApiService', '$mdToast', function ( $rootScope , $window , $location , ClientApiService, $mdToast ) {\n    var self = this;\n\n    self.current = {\n        address: \"\" ,\n        address2: \"\" ,\n        cake_sub_id: \"\" ,\n        check_global_suppression: \"Y\" ,\n        check_previous_oc: \"0\" ,\n        city: \"\" ,\n        client_has_client_group_restrictions: \"0\" ,\n        client_id: \"\" ,\n        client_main_name: \"\" ,\n        client_record_ip: \"\" ,\n        client_record_source_url: \"\" ,\n        client_type: \"\" ,\n        country_id: \"\" ,\n        email_addr: \"\" ,\n        ftp_pw: \"\" ,\n        ftp_url: \"\" ,\n        ftp_user: \"\" ,\n        has_client_group_restriction: \"0\" ,\n        list_owner: \"\" ,\n        clientTypeId: \"\",\n        minimum_acceptable_record_date: \"\" ,\n        network: \"\" ,\n        orange_client: \"Y\" ,\n        password: \"\" ,\n        phone: \"\" ,\n        rt_pw: \"\" ,\n        state: \"\" ,\n        status: \"D\" ,\n        username: \"\" ,\n        zip: \"\",\n        payout_type: \"\",\n        payout_amount: \"0\"\n    };\n\n    self.clients = [];\n\n    self.createUrl = '/client/create';\n\n    self.pageCount = 0;\n    self.paginationCount = '10';\n    self.currentPage = 1;\n\n    self.currentlyLoading = 0;\n    self.generatingLinks = 0;\n    self.updatingClient = 0;\n    self.creatingClient = 0;\n\n    self.clientTypes = [];\n    self.typeSearchText = '';\n    self.formErrors = [];\n    self.listOwners = [];\n    self.ownerSearchText = '';\n\n    self.urlList = [];\n\n    /**\n     * Init Methods\n     */\n    self.loadAutoComplete = function () {\n        self.loadClientTypes();\n        self.loadListOwners();\n    };\n\n    self.loadClient = function () {\n        var currentPath = $location.path();\n        var matches = currentPath.match( /\\/(\\d{1,})/ );\n        var id = matches[ 1 ]; \n\n        ClientApiService.getClient( id , self.loadClientSuccessCallback , self.loadClientSuccessCallback );\n    };\n\n    self.loadClients = function () {\n        self.currentlyLoading = 1;\n\n        ClientApiService.getClients( self.currentPage , self.paginationCount , self.loadClientsSuccessCallback , self.loadClientsFailureCallback );\n    };\n\n\n    /**\n     * Button Click Handlers\n     */\n    self.viewAdd = function () {\n        $location.url( self.createUrl );\n        $window.location.href = self.createUrl;\n    };\n\n    self.generateLinks = function () {\n        if ( self.urlList.length === 0 ) {\n            self.generatingLinks = 1;\n\n            ClientApiService.generateLinks(\n                self.current.client_id ,\n                self.generateLinksSuccessCallback ,\n                self.generateLinksFailureCallback\n            );\n        } else {\n            $( '#urlModal' ).modal('show');\n        }\n    };\n\n    /**\n     * Watchers\n     */\n    $rootScope.$on( 'updatePage' , function () {\n        self.loadClients();\n    } );\n\n\n    /**\n     * Form Methods\n     */\n  \n    self.getClientData = function () {\n        var clientData = {};\n\n        angular.forEach( self.current , function ( field , fieldName ) {\n            if ( typeof( field ) == 'object' ) {\n                this[ fieldName ] = field.value;\n            } else {\n                this[ fieldName ] = field;\n            }\n        } , clientData );\n\n        return clientData;\n    };\n\n\n    /**\n     * Look-forwward Fields\n     */\n    self.getClientType = function ( searchText ) {\n        return searchText ? self.clientTypes.filter( function ( obj ) { return obj.name.toLowerCase().indexOf( searchText.toLowerCase() ) === 0; } ) : self.clientTypes;\n    };\n\n    self.loadClientTypes = function () {\n        ClientApiService.getTypes( self.loadClientTypesSuccessCallback , self.loadClientTypesFailureCallback );\n    };\n\n    self.getListOwners = function ( searchText ) {\n        return searchText ? self.listOwners.filter( function ( obj ) { return obj.name.toLowerCase().indexOf( searchText.toLowerCase() ) === 0; } ) : self.listOwners;\n    };\n\n    self.loadListOwners = function () {\n        ClientApiService.getListOwners( self.loadListOwnersSuccessCallback , self.loadListOwnersFailureCallback );\n    };\n\n    self.loadListOwnersSuccessCallback = function ( response ) {\n        self.listOwners = response.data; \n    };\n\n    self.loadListOwnersFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load client types.' );\n\n        self.launchModal();\n    };\n\n    self.updateClient = function () {\n        self.resetFieldErrors();\n        var clientData = angular.copy( self.current );\n        clientData.list_owner = self.current.list_owner.name;\n        clientData.client_type = self.current.client_type.value;\n        ClientApiService.updateClient( clientData , self.SuccessCallBackRedirectList , self.updateClientFailureCallback );\n    };\n\n    self.resetPassword = function() {\n        var clientData  = angular.copy( self.current );\n        ClientApiService.updatePassword( clientData , function(){ $mdToast.showSimple( 'Password Reset has been submitted' );} , self.updateClientFailureCallback );\n\n    };\n\n    self.saveClient = function () {\n        self.resetFieldErrors();\n\n        var clientData = angular.copy( self.current );\n\n        clientData.list_owner = self.current.list_owner.name;\n        clientData.newClient = 1;\n        clientData.client_type = self.current.client_type.value;\n\n        ClientApiService.saveClient( clientData , self.SuccessCallBackRedirect , self.saveClientFailureCallback );\n    };\n\n    self.viewAdd = function () {\n        $location.url( self.createUrl );\n        $window.location.href = self.createUrl;\n    };\n\n    /**\n     * Page Modal\n     */\n    self.setModalLabel = function ( labelText ) {\n        var modalLabel = angular.element( document.querySelector( '#pageModalLabel' ) );\n\n        modalLabel.text( labelText );\n    };\n\n    self.setModalBody = function ( bodyText ) {\n        var modalBody = angular.element( document.querySelector( '#pageModalBody' ) );\n\n        modalBody.text( bodyText );\n    }\n\n    self.launchModal = function () {\n        $( '#pageModal' ).modal('show');\n    };\n\n    self.resetModal = function () {\n        self.setModalLabel( '' );\n        self.setModalBody( '' );\n\n        $( '#pageModal' ).modal('hide');\n    };\n\n\n    /**\n     * Callbacks\n     */\n    self.loadClientSuccessCallback = function ( response ) {\n        var currentRecord = response.data[ 0 ];\n\n        currentRecord.country_id = parseInt( currentRecord[ 'country_id' ] );\n        currentRecord.client_type = {name:currentRecord[ 'client_type'],value:currentRecord[ 'client_type']};\n        currentRecord.list_owner = {name:currentRecord[ 'list_owner'],value:currentRecord[ 'list_owner']};\n\n        self.current = currentRecord;\n    };\n\n    self.SuccessCallBackRedirect = function ( response ) {\n        $location.url( '/client/edit/'+ response.data.clientId );\n        $window.location.href = '/client/edit/' + response.data.clientId;\n    };\n    self.SuccessCallBackRedirectList = function ( response ) {\n        $location.url( '/client/');\n        $window.location.href = '/client/';\n    };\n\n\n    self.loadClientFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load client.' );\n\n        self.launchModal();\n    };\n\n    self.loadClientsSuccessCallback = function ( response ) {\n        self.clients = response.data.data;\n\n        self.pageCount = response.data.last_page;\n\n        self.currentlyLoading = 0;\n    };\n\n    self.loadClientsFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load clients.' );\n\n        self.launchModal();\n    };\n\n    self.updateClientSuccessCallback = function () {\n        self.setModalLabel( 'Update Client' );\n        self.setModalBody( 'Successfully updated client.' );\n\n        self.launchModal();\n    };\n    \n    self.updateClientFailureCallback = function (response) {\n        self.loadFieldErrors(response);\n    };\n    \n    self.saveClientFailureCallback = function (response) {\n        self.loadFieldErrors(response);\n    };\n\n    /**\n     * Errors\n     */\n    self.loadFieldErrors = function (response ) {\n        angular.forEach(response.data, function(value, key) {\n            self.setFieldError( key , value );\n        });\n    };\n\n    self.loadClientTypesSuccessCallback = function ( response ) {\n        self.clientTypes = response.data;\n    };\n\n    self.loadClientTypesFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load client types.' );\n\n        self.launchModal();\n    };\n\n    self.loadListOwnersSuccessCallback = function ( response ) {\n        self.listOwners = response.data;\n    };\n\n    self.loadListOwnersFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load client types.' );\n\n        self.launchModal();\n    };\n\n    self.generateLinksSuccessCallback = function ( response ) {\n        self.generatingLinks = 0;\n\n        self.urlList = response.data;\n\n        $( '#urlModal' ).modal('show');\n    };\n\n    self.generateLinksFailureCallback = function ( response ) {\n        self.generatingLinks = 0;\n\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to generate links.' );\n\n        self.launchModal();\n    }\n\n    self.setFieldError = function ( field , errorMessage ) {\n        self.formErrors[ field ] = errorMessage;\n    };\n\n    self.resetFieldErrors = function () {\n        self.formErrors = {};\n    };\n\n} ] );\n","mt2App.service( 'ClientApiService' , function ( $http , $log ) {\n    var self = this;\n\n    self.pagerApiUrl = '/api/pager/Client';\n    self.baseApiUrl = '/api/client';\n    self.baseMt1ApiUrl = '/api/mt1';\n    self.attributionApiUrl = '/api/attribution';\n    self.attributionListApiUrl = '/api/client/attribution/list';\n    self.resetPasswordUrl = '/api/client/updatepassword';\n\n    self.getClient = function ( id , successCallback , failureCallback ) {\n        $http( { \"method\" : \"GET\" , \"url\" : this.baseApiUrl + '/' + id } )\n            .then( successCallback , failureCallback );\n    };\n\n    self.getClients = function ( page , count , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" ,\n            \"url\" : self.pagerApiUrl , \n            \"params\" : { \"page\" : page , \"count\" : count }\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.getAllClients = function ( successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" ,\n            \"url\" : self.baseApiUrl\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.saveClient = function ( clientData , successCallback , failureCallback ) {\n        $http( { \"method\" : \"POST\" , \"url\" : this.baseApiUrl , \"data\" : clientData } )\n            .then( successCallback , failureCallback );\n    };\n\n    self.updateClient = function ( clientData , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"PUT\" ,\n            \"url\" : this.baseApiUrl + '/' + clientData.client_id ,\n            \"params\" : { \"_method\" : \"PUT\" } ,\n            \"data\" : clientData\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.updatePassword = function ( clientData , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" ,\n            \"url\" : this.resetPasswordUrl + '/' + clientData.ftp_user\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.getTypes = function ( successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" ,\n            \"url\" : self.baseMt1ApiUrl + '/client/types'\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.getListOwners = function ( successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" ,\n            \"url\" : self.baseMt1ApiUrl + '/clientstatsgrouping'\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.generateLinks = function ( id , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" , \n            \"url\" : self.baseMt1ApiUrl + '/client/generatelinks/' + id\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.getClientAttributionList = function ( currentPage , paginationCount , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"GET\" , \n            \"url\" : self.attributionListApiUrl ,\n            \"params\" : {\n                'page' : currentPage ,\n                'count' : paginationCount\n            }\n        } ).then( successCallback , failureCallback );\n    };\n\n    self.setAttribution = function ( id , level , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"POST\" ,\n            \"url\" : self.attributionApiUrl ,\n            \"params\" : { \"cid\" : id , \"level\" : level }\n        } ).then( successCallback , failureCallback );\n    }\n\n    self.deleteAttribution = function ( id , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"POST\" ,\n            \"url\" : self.attributionApiUrl ,\n            \"params\" : { \"cid\" : id , \"level\" : 255 }\n        } ).then( successCallback , failureCallback );\n    }\n} );\n","mt2App.directive( 'clientTable' , function () {\n    return {\n        \"scope\" : {} ,\n        \"controller\" : function () {} ,\n        \"controllerAs\" : \"ctrl\" ,\n        \"bindToController\" : {\n            \"records\" : \"=\" ,\n            \"loadingflag\" : \"=\"\n        } ,\n        \"templateUrl\" : \"js/templates/client-table.html\"\n    };\n} );\n","mt2App.directive( 'clientUrlModal' , function () {\n    return {\n        \"scope\" : {} ,\n        \"controller\" : function () {} ,\n        \"controllerAs\" : \"ctrl\" ,\n        \"bindToController\" : {\n            \"records\" : \"=\"\n        } ,\n        \"templateUrl\" : \"js/templates/client-url-modal.html\"\n    };\n} );\n"],"sourceRoot":"/source/"}