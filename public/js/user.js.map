{"version":3,"sources":["UserController.js","UserApiService.js"],"names":[],"mappingsfile":"user.js","sourcesContent":["mt2App.controller( 'userController' , [ '$log' , '$window' , '$location' , '$timeout' , 'UserApiService' , function ( $log , $window , $location , $timeout , UserApiService ) {\n    var self = this;\n    self.$location = $location;\n\n    self.headers = [ '' , 'ID', 'email', 'First Name', 'Last Name', 'Roles', \"Status\" , \"Last Login\"];\n    self.accounts = [];\n    self.currentAccount = { \"email\" : \"\" , \"password\" : \"\" , \"password_confirmation\" : \"\" , \"first_name\" : \"\" , \"last_name\" : \"\" , \"roles\" : \"\"};\n    self.currentAccount.roles = [];\n    self.createUrl = 'user/create/';\n    self.editUrl = 'user/edit/';\n\n    self.formErrors = \"\";\n\n    self.loadAccount = function () {\n        var pathMatches = $location.path().match( /^\\/user\\/edit\\/(\\d{1,})/ );\n\n        UserApiService.getAccount( pathMatches[ 1 ] , function ( response ) {\n            self.currentAccount = response.data;\n        } )\n    }\n\n    self.loadAccounts = function () {\n        UserApiService.getAccounts( self.loadAccountsSuccessCallback , self.loadAccountsFailureCallback );\n    };\n\n    self.resetForm = function () {\n        self.currentAccount = {};\n    };\n\n    /**\n     * Click Handlers\n     */\n    self.viewAdd = function () {\n        $location.url( self.createUrl );\n        $window.location.href = self.createUrl;\n    };\n\n    self.saveNewAccount = function () {\n        self.resetFieldErrors();\n\n        UserApiService.saveNewAccount( self.currentAccount , self.SuccessCallBackRedirect , self.saveNewAccountFailureCallback );\n    };\n\n    self.editAccount = function () {\n        self.resetFieldErrors();\n\n        UserApiService.editAccount( self.currentAccount , self.SuccessCallBackRedirect , self.editAccountFailureCallback );\n    };\n\n    self.toggleSelection = function (role) {\n        var idx = self.currentAccount.roles.indexOf(role);\n\n        // is currently selected\n        if (idx > -1) {\n            self.currentAccount.roles.splice(idx, 1);\n        }\n\n        // is newly selected\n        else {\n            self.currentAccount.roles.push(role);\n        }\n    };\n\n\n    /**\n     * Callbacks\n     */\n    self.loadAccountsSuccessCallback = function ( response ) {\n        self.accounts = response.data;\n    };\n\n    self.loadAccountsFailureCallback = function ( response ) {\n        self.setModalLabel( 'Error' );\n        self.setModalBody( 'Failed to load Users.' );\n\n        self.launchModal();\n    }\n\n    self.SuccessCallBackRedirect = function ( response ) {\n        $window.location.href = '/user';\n    };\n\n    self.saveNewAccountFailureCallback = function ( response ) {\n        self.loadFieldErrors( 'email' , response );\n        self.loadFieldErrors( 'first_name' , response );\n        self.loadFieldErrors( 'last_name' , response );\n        self.loadFieldErrors( 'password' , response );\n        self.loadFieldErrors( 'password_confirmation' , response );\n        self.loadFieldErrors( 'roles' , response );\n    };\n\n    self.editAccountFailureCallback = function ( response ) {\n        self.loadFieldErrors( 'email' , response );\n        self.loadFieldErrors( 'first_name' , response );\n        self.loadFieldErrors( 'last_name' , response );\n        self.loadFieldErrors( 'roles' , response );\n    };\n\n    /**\n     * Errors\n     */\n    self.loadFieldErrors = function ( field , response ) {\n        if ( typeof( response.data[ field ] ) != 'undefined' ) {\n            self.setFieldError( field , response.data[ field ].join( ' ' ) );\n        }\n    };\n\n    self.setFieldError = function ( field , errorMessage ) {\n        self.formErrors[ field ] = errorMessage;\n    };\n\n    self.resetFieldErrors = function () {\n        self.formErrors = {};\n    };\n\n    /**\n     * Page Modal\n     */\n\n    self.setModalLabel = function ( labelText ) {\n        var modalLabel = angular.element( document.querySelector( '#pageModalLabel' ) );\n\n        modalLabel.text( labelText );\n    };\n\n    self.setModalBody = function ( bodyText ) {\n        var modalBody = angular.element( document.querySelector( '#pageModalBody' ) );\n\n        modalBody.text( bodyText );\n    };\n\n    self.launchModal = function () {\n        $( '#pageModal' ).modal('show');\n    };\n\n    self.resetModal = function () {\n        self.setModalLabel( '' );\n        self.setModalBody( '' );\n\n        $( '#pageModal' ).modal('hide');\n    };\n} ] );\n","mt2App.service( 'UserApiService' , function ( $http , $log ) {\n    var self = this;\n\n    self.baseApiUrl = '/api/user';\n\n    self.getAccount = function ( id , successCallback ) {\n        $http( { \"method\" : \"GET\" , \"url\" : this.baseApiUrl + '/' + id } )\n            .then( successCallback );\n    }\n\n    self.getAccounts = function ( successCallback , failureCallback ) {\n        $http( { \"method\" : \"GET\" , \"url\" : this.baseApiUrl } )\n            .then( successCallback , failureCallback );\n    }\n\n    self.saveNewAccount = function ( newAccount , successCallback , failureCallback ) {\n        $http( {\n            \"method\" : \"POST\" ,\n            \"url\" : this.baseApiUrl ,\n            \"data\" : newAccount\n        } ).then( successCallback , failureCallback );\n    }\n\n    self.editAccount = function ( account , successCallback , failureCallback  ) {\n        var request = account;\n\n        request[ '_method' ] = 'PUT';\n\n        $http( {\n            \"method\" : \"PUT\" ,\n            \"url\" : this.baseApiUrl + '/' + account.id ,\n            \"data\" : request\n        } ).then( successCallback , failureCallback );\n    }\n} );\n"],"sourceRoot":"/source/"}